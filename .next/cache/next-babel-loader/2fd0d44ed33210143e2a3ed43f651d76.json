{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport 'isomorphic-unfetch';\nimport Layout from '../components/Layout';\nimport ChannelGrid from '../components/ChannelGrid';\nimport Error from './_error';\n\nvar Index = function Index(props) {\n  var channels = props.channels,\n      statusCode = props.statusCode;\n\n  if (statusCode !== 200) {\n    return __jsx(Error, {\n      statusCode: statusCode\n    });\n  }\n\n  return __jsx(Layout, {\n    title: \"Podcats\"\n  }, __jsx(ChannelGrid, {\n    channels: channels\n  }));\n};\n\nIndex.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref) {\n    var res, req, _ref3, channels;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            res = _ref.res;\n            _context.prev = 1;\n            _context.next = 4;\n            return fetch('https://api.audioboom.com/channels/recommended');\n\n          case 4:\n            req = _context.sent;\n            _context.next = 7;\n            return req.json();\n\n          case 7:\n            _ref3 = _context.sent;\n            channels = _ref3.body;\n            return _context.abrupt(\"return\", {\n              channels: channels,\n              statusCode: 200\n            });\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](1);\n            res.statusCode = 503;\n            return _context.abrupt(\"return\", {\n              channel: null,\n              statusCode: 503\n            });\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 12]]);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default Index;","map":{"version":3,"sources":["C:/Users/lbrito/Dropbox/Desarrollos/CursoNext/podcast/pages/index.js"],"names":["Layout","ChannelGrid","Error","Index","props","channels","statusCode","getInitialProps","res","fetch","req","json","body","channel"],"mappings":";;;;AAAA,OAAO,oBAAP;AACA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAW;AAAA,MAEdC,QAFc,GAEUD,KAFV,CAEdC,QAFc;AAAA,MAEJC,UAFI,GAEUF,KAFV,CAEJE,UAFI;;AAGrB,MAAGA,UAAU,KAAK,GAAlB,EAAsB;AAClB,WAAO,MAAC,KAAD;AAAO,MAAA,UAAU,EAAEA;AAAnB,MAAP;AACH;;AACD,SACI,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC;AAAd,KAEI,MAAC,WAAD;AAAa,IAAA,QAAQ,EAAED;AAAvB,IAFJ,CADJ;AAQH,CAdD;;AAgBAF,KAAK,CAACI,eAAN;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAwB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,GAAT,QAASA,GAAT;AAAA;AAAA;AAAA,mBAEAC,KAAK,CAAC,gDAAD,CAFL;;AAAA;AAEZC,YAAAA,GAFY;AAAA;AAAA,mBAGaA,GAAG,CAACC,IAAJ,EAHb;;AAAA;AAAA;AAGLN,YAAAA,QAHK,SAGXO,IAHW;AAAA,6CAKT;AAAEP,cAAAA,QAAQ,EAARA,QAAF;AAAYC,cAAAA,UAAU,EAAE;AAAxB,aALS;;AAAA;AAAA;AAAA;AAQhBE,YAAAA,GAAG,CAACF,UAAJ,GAAiB,GAAjB;AARgB,6CAST;AAAEO,cAAAA,OAAO,EAAE,IAAX;AAAiBP,cAAAA,UAAU,EAAE;AAA7B,aATS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AAcA,eAAeH,KAAf","sourcesContent":["import 'isomorphic-unfetch';\nimport Layout from '../components/Layout';\nimport ChannelGrid from '../components/ChannelGrid';\nimport Error from './_error';\n\nconst Index = (props) => {\n\n    const {channels, statusCode} = props;\n    if(statusCode !== 200){\n        return <Error statusCode={statusCode} />\n    }\n    return ( \n        <Layout title=\"Podcats\">\n  \n            <ChannelGrid channels={channels} />\n\n        </Layout>\n    );\n\n}\n\nIndex.getInitialProps = async ({ res }) => {\n    try{\n        let req = await fetch('https://api.audioboom.com/channels/recommended');\n        let {body: channels} = await req.json();\n    \n        return { channels, statusCode: 200 }\n\n    } catch(e){\n        res.statusCode = 503\n        return { channel: null, statusCode: 503 }\n    }\n}\n\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}